`timescale 1ns / 1ps

////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer:
//
// Create Date:   11:37:12 12/17/2020
// Design Name:   CPU_BUS
// Module Name:   C:/Users/Administrator/Desktop/CPU_T/Prj/CPU_T/CPU_T_M.v
// Project Name:  CPU_T
// Target Device:  
// Tool versions:  
// Description: 
//
// Verilog Test Fixture created by ISE for module: CPU_BUS
//
// Dependencies:
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
////////////////////////////////////////////////////////////////////////////////

module CPU_BUS_tb;

	// Inputs
	reg RESET;
	reg [3:0] FSMC_ADD;
	reg FSMC_nCS;
	reg [1:0] FSMC_NOE;
	reg FSMC_NWE;
	reg [7:0] FSMC_DATAIN;
	reg CLK_IN;

	// Outputs
	wire [7:0] FSMC_DATAOUT;

	// Instantiate the Unit Under Test (UUT)
	CPU_BUS uut (
		.RESET(RESET), 
		.FSMC_ADD(FSMC_ADD), 
		.FSMC_nCS(FSMC_nCS), 
		.FSMC_NOE(FSMC_NOE), 
		.FSMC_NWE(FSMC_NWE), 
		.FSMC_DATAIN(FSMC_DATAIN), 
		.FSMC_DATAOUT(FSMC_DATAOUT), 
		.CLK_IN(CLK_IN)
	);

	initial begin
		// Initialize Inputs
		RESET = 0;
		FSMC_ADD = 0;
		FSMC_nCS = 0;
		FSMC_NOE = 0;
		FSMC_NWE = 0;
		FSMC_DATAIN = 0;
		CLK_IN = 0;

		// Wait 100 ns for global reset to finish
		#100;
        RESET = 1;
		// Add stimulus here

	end

always 
begin 
   #10;CLK_IN=0;
   #10;CLK_IN=1;
end 
reg[31:0] Num;
reg[31:0] Ctr;
always @(posedge CLK_IN or negedge  RESET)
begin 
    if(!RESET) begin 
		FSMC_ADD <= 0;
		FSMC_nCS <= 0;
		FSMC_NOE <= 0;
		FSMC_NWE <= 0;
		FSMC_DATAIN <= 0;
	    Num<=0;
		Ctr<=0;
	end 
    else begin 
	    case (Num) 
		    0:begin 
				FSMC_ADD <= 0;//???R1???????????AB
		        FSMC_nCS <= 0;
		        FSMC_NOE <= 0;
		        FSMC_NWE <= 0;
		        FSMC_DATAIN <= 8'hAB;
				Num<=1;
				Ctr<=0;
			end 
		    1:begin 
				FSMC_ADD <= 0;
		        FSMC_nCS <= 1;
				Num<=2;
			end
		    2:begin 
				FSMC_ADD <= 1;//???R2???????????AC
		        FSMC_nCS <= 0;
		        FSMC_NOE <= 0;
		        FSMC_NWE <= 0;
		        FSMC_DATAIN <= 8'hAC;
				Num<=3;
			end 
		    3:begin 
				FSMC_ADD <= 0;
		        FSMC_nCS <= 1;
				Num<=4;
			end 			
			4:begin 
				FSMC_ADD <= 2;//???R3???????????AC
		        FSMC_nCS <= 0;
		        FSMC_NOE <= 0;
		        FSMC_NWE <= 0;
		        FSMC_DATAIN <= 8'hAD;
				Num<=5;
			end 
		    5:begin //????R1?R2????
				FSMC_ADD <= 0;
		        FSMC_nCS <= 1;
				Ctr<=Ctr+1;
				if(Ctr>20) Num<=6;
			end 
	        6,7,8,9:begin 
			    FSMC_NOE <= 2'b01; 
				Num<=Num+1;
			end 
			10:begin 
			    FSMC_NOE <= 2'b01; 
			end 
	    endcase 
	end 
end      
endmodule

